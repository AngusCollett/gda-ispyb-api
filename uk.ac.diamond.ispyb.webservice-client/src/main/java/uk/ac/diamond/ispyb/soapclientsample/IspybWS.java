package uk.ac.diamond.ispyb.soapclientsample;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.10
 * 2017-03-10T14:38:29.490Z
 * Generated source version: 3.1.10
 * 
 */
@WebServiceClient(name = "ispybWS", 
                  wsdlLocation = "http://localhost:8080/ispyb/ispyb-ws/ispybWS/ToolsForCollectionWebService?wsdl",
                  targetNamespace = "http://ispyb.ejb3.webservices.collection") 
public class IspybWS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ispyb.ejb3.webservices.collection", "ispybWS");
    public final static QName ToolsForCollectionWebServicePort = new QName("http://ispyb.ejb3.webservices.collection", "ToolsForCollectionWebServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/ispyb/ispyb-ws/ispybWS/ToolsForCollectionWebService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(IspybWS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/ispyb/ispyb-ws/ispybWS/ToolsForCollectionWebService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public IspybWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public IspybWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IspybWS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public IspybWS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public IspybWS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public IspybWS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns ToolsForCollectionWebService
     */
    @WebEndpoint(name = "ToolsForCollectionWebServicePort")
    public ToolsForCollectionWebService getToolsForCollectionWebServicePort() {
        return super.getPort(ToolsForCollectionWebServicePort, ToolsForCollectionWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ToolsForCollectionWebService
     */
    @WebEndpoint(name = "ToolsForCollectionWebServicePort")
    public ToolsForCollectionWebService getToolsForCollectionWebServicePort(WebServiceFeature... features) {
        return super.getPort(ToolsForCollectionWebServicePort, ToolsForCollectionWebService.class, features);
    }

}
